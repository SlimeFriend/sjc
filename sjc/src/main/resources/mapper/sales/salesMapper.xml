<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sjc.app.sales.mapper.SalesMapper">

	<!-- 업체 리스트 조회 -->
	<select id="selectCompany" resultType="OrderVO">
		SELECT cp_code,
		       cp_name
		FROM   cp
	</select>

	<!-- 제품조회 -->
	<select id="selectProduct" resultType="ProductVO">
		SELECT prd_name,
		       prd_code,
		       unit_price
		FROM   prd
	</select>
	
	<select id="selectProductDetail" parameterType="String" resultType="map">
		SELECT p.prd_name,
		       p.prd_code,
		       pm.lot,
		       pm.md,
		       pm.ed,
		       pm.stc_quantity
		       
		FROM   prd p JOIN prd_management pm
		               ON p.prd_code = pm.prd_code
		               
		WHERE  p.prd_code = #{prdCode} 
		  AND  pm.stc_quantity > 0
	</select>

	<!-- 주문 접수 -->
	<insert id="insertOrder" parameterType="OrderVO">
		INSERT INTO ORD (ord_code, 
                 ord_date, 
                 dlv_req_date, 
                 cp_code, 
                 comm)
        VALUES ( #{ordCode}, 
                 SYSDATE,
                 #{dlvReqDate},
                 #{cpCode}, 
                 #{comm})
	</insert>
	
	<!-- 주문 상세 -->
	<insert id="insertOrderDetail" parameterType="map">
	    INSERT INTO ORD_DETAIL (ord_detail_code, ord_code, prd_code, prd_name, ord_quantity, price)
	    VALUES ('ORDDETAIL' || TO_CHAR(SYSDATE, 'YYYYMMDD') || ord_seq.NEXTVAL, 
	    #{ordCode}, #{productVO.prdCode}, #{productVO.prdName}, #{productVO.ordQuantity}, #{productVO.price})
	</insert>
	
	<!-- 주문내역 검색 기능 -->
	<select id="searchOrder" parameterType="map" resultType="orderVO">
    	SELECT o.ord_code,
		       c.cp_name,
		       o.ord_date,
		       o.dlv_req_date,
		       o.ord_status,
		       o.comm	       
		FROM   ord o LEFT JOIN cp c
		ON     o.cp_code = c.cp_code
		WHERE  c.cp_name LIKE CONCAT(#{companyName}, '%')
	</select>
	
	<select id="getOrdCode" resultType="String">
		SELECT 
		    CASE
		        WHEN (MAX(SUBSTR(ord_code, 4, 8)) = TO_CHAR(SYSDATE, 'yyyyMMdd')) THEN 
		            ('ORD' || TO_CHAR(MAX(SUBSTR(ord_code, 4, 12)) + 1))
		        ELSE 
		            ('ORD' || TO_CHAR(SYSDATE, 'yyyyMMdd') || TO_CHAR(LPAD(1, 3, '0')))
		    END AS ord_code
		FROM ord
	</select>
	
	<select id="getLot" resultType="String">
		SELECT 
		    CASE
		        WHEN (MAX(SUBSTR(lot, 4, 8)) = TO_CHAR(SYSDATE, 'yyyyMMdd')) THEN 
		            ('LOT' || TO_CHAR(MAX(SUBSTR(lot, 4, 12)) + 1))
		        ELSE 
		            ('LOT' || TO_CHAR(SYSDATE, 'yyyyMMdd') || TO_CHAR(LPAD(1, 3, '0')))
		    END AS lot
		FROM prd_management
	</select>

	<!-- 주문내역 조회 -->
	<select id="selectOrder" resultType="OrderVO">
		SELECT o.ord_code,
		       c.cp_name,
		       o.ord_date,
		       o.dlv_req_date,
		       o.ord_status,
		       o.comm
		       
		FROM   ord o LEFT JOIN cp c
		ON     o.cp_code = c.cp_code
	</select>
	
	<select id="selectOrderDetail" parameterType="String" resultType="map">
	    SELECT o.ord_code AS ordCode,
	           od.prd_name AS prdName,
	           od.prd_code AS prdCode,
	           od.ord_quantity AS ordQuantity,
	           o.ord_status AS ordStatus
	    FROM   ord o JOIN ord_detail od 
	                   ON o.ord_code = od.ord_code
	    WHERE  o.ord_code = #{ordCode}
	</select>

	<!-- 제품관리 조회 -->
	<select id="selectProductManagement" resultType="ProductVO">
		SELECT   p.prd_name, 
	         	 p.prd_code, 
	         	 p.unit_price,
	         	 COALESCE(SUM(pm.stc_quantity), 0) AS stcQuantity
		FROM     prd p LEFT JOIN prd_management pm
		ON       p.prd_code = pm.prd_code
		GROUP BY p.prd_name, p.prd_code, p.unit_price
	</select>
	
	<select id="selectOrdersByStatus" resultType="OrderVO">
    	SELECT o.ord_code,
		       c.cp_name,
		       o.ord_date,
		       o.dlv_req_date,
		       o.ord_status,
		       o.comm
		       
		FROM   ord o LEFT JOIN cp c
		ON     o.cp_code = c.cp_code
    	WHERE ord_status = #{status}
	</select>
	
	<select id="selectProductLot" resultType="ProductVO">
		SELECT   p.prd_name,
		         p.prd_code,
				 pm.lot,
				 pm.md,
				 pm.ed,
				 pm.stc_quantity
		FROM     prd p JOIN prd_management pm
		ON       p.prd_code = pm.prd_code
	</select>

	<!-- 제품입고 조회 -->
	<select id="selectProductIn" resultType="ProductVO">
		SELECT p.prd_name,
			   p.prd_code,
			   pm.lot,
		       pm.md,
			   pm.ed,
			   pm.stc_quantity
		FROM   prd p JOIN prd_management pm
		               ON p.prd_code = pm.prd_code
	</select>

	<!-- 제품출고 조회 -->
	<select id="selectProductOut" resultType="OrderVO">
		SELECT o.ord_code,
			   c.cp_name,
			   o.ord_date,
			   o.dlv_req_date,
			   o.ord_status
		FROM   ord o JOIN cp c
		               ON o.cp_code = c.cp_code
	</select>

	<!-- 제품 입출고 내역 -->
	<select id="selectOutHistory" resultType="outHistoryVO">
		SELECT      poh.LOT AS "lot",
		            p.PRD_NAME AS "prdName",
		            poh.OUT_QUANTITY AS "outQuantity",
		            poh.OUT_DATE AS "outDate",
		            poh.CP_NAME AS "cpName",
		            poh.ORD_CODE AS "ordCode"
		FROM        prd_out_history poh LEFT JOIN prd p
		                                ON p.prd_code = poh.prd_code
		ORDER BY    poh.LOT
	</select>
	
	
	<!-- 출고접수 프로세스 -->
	
	<!-- 미출고량 계산 -->
	<select id="selectRemainData" parameterType="map" resultType="int">
		WITH r AS (SELECT ord_code,
                  prd_code,
                  SUM(out_quantity) remain_Quantity
        FROM      prd_out_history
        GROUP BY  ord_code, prd_code)
           
	    SELECT o.ord_code AS ordCode,
	           od.prd_name AS prdName,
	           od.prd_code AS prdCode,
	           od.ord_quantity AS ordQuantity,
	           o.ord_status AS ordStatus,
	           od.ord_quantity - r.remain_Quantity AS remainQuantity
	    FROM   ord o 
	    JOIN   ord_detail od ON o.ord_code = od.ord_code
	    JOIN   r ON (r.ord_code = od.ord_code AND r.prd_code = od.prd_code)
	    WHERE  o.ord_code = #{ordCode} AND r.prd_code = #{prdCode}
	</select>
	
	<update id="updateOrdFinish">
		UPDATE ord
		SET ord_status = '출고완료'
		WHERE ord_code = #{ordCode}
	</update>
	
	<!-- LOT출고접수 프로세스 -->
	<insert id="insertOutHistory">
		INSERT INTO prd_out_history(out_no, lot, prd_code, out_quantity, out_date, ord_code, cp_name)
		VALUES(out_seq.NEXTVAL + 3, #{lot}, #{prdCode}, #{outQuantity}, SYSDATE, #{ordCode}, #{cpName})
	</insert>
	
	<!-- Prd출고접수 프로세스 -->
	<update id="prdLotOutProcess">
		UPDATE prd_management
		SET    out_quantity = out_quantity + #{outQuantity}
		WHERE  lot = #{lot}
	</update>
	
</mapper>

	